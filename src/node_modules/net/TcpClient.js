"use strict"

var net = require("net");
var events = require("events");
var util = require("util");

module.exports = TcpClient;

function TcpClient(packet, socket){
	this.socket = socket || new net.Socket();
	this.recvBuffer = new Buffer(0);
	this.isWaiting = false;
	this.packet = packet;
	this.recvPacketList = [];

	var self = this;
	this.socket.on("connect", function(){
		self.__onConnect();
	});
	this.socket.on("data", function(chunk){
		self.__onData(chunk);
	});
	this.socket.on("close", function(){
		self.emit("close");
	});
	this.socket.on("error", function(err){
		self.__onError(err);
	});
}

util.inherits(TcpClient, events.EventEmitter);
var prototype = TcpClient.prototype;

prototype.connect = function(host, port){
	this.socket.connect(port, host);
}

prototype.end = function(){
	this.socket.end();
}

prototype.__onConnect = function(){
	console.log("connect success!");
}

prototype.__onError = function(err){
	console.log(err);
}

prototype.__onData = function(chunk){
	this.recvBuffer = Buffer.concat([this.recvBuffer, chunk]);
	this.read();
	while(this.recvPacketList.length > 0){
		this.emit("data", this, this.recvPacketList.shift());
	}
}

prototype.read = function(){
	if(this.isWaiting){
		this.readBody();
	}else if(this.recvBuffer.length >= this.packet.getHeadSize()){
		this.packet.readHead(this.recvBuffer);
		this.recvBuffer = this.recvBuffer.slice(this.packet.getHeadSize());
		this.readBody();
	}
}

prototype.readBody = function(){
	var bodySize = this.packet.getBodySize();

	if(this.recvBuffer.length < bodySize){
		this.isWaiting = true;
		return;
	}

	if(bodySize > 0){
		this.packet.readBody(this.recvBuffer);
		this.recvBuffer = this.recvBuffer.slice(bodySize);
	}

	this.recvPacketList.push(this.packet);
	this.packet = this.packet.create();

	this.isWaiting = false;
	this.read();
}

prototype.send = function(msgId, msgData){
	var packet = this.packet.create();
	packet.msgId = msgId;
	packet.body = msgData;
	this.sendImpl(packet.toBytes());
}

prototype.sendImpl = function(chunk){
	this.socket.write(chunk);
}